1. Rename Application to “CityScout” and Update Branding
Why: The current name “Find My City” is descriptive but lacks distinct branding. Adopting “CityScout” makes the product memorable, aligns with our mission of scouting cities for users, and improves SEO (with “city” in the name). This change sets a professional tone and allows all subsequent branding elements (logo, tagline, etc.) to be built around a strong identity.
What: Change all instances of the app name in the UI, documentation, and metadata to “CityScout”. This includes the logo text, page titles, navigation bar label, and any mentions in the about page content. Update the site <title> tag and meta description for SEO to reflect the new name and tagline (e.g., “CityScout – Relocation made simple for remote workers”). If a custom domain will be used (e.g., cityscout.com), prepare to switch to that, but ensure old links redirect appropriately.
How: In the codebase, search for “Find My City” and related terms and replace them with “CityScout”. Update the Next.js config if any (like the site name in _app or layout files). Since this is mostly text, it won’t break functionality – just ensure consistency (case and spacing of “CityScout”). For the logo, if initially just text, update the styling to use the new name. No functional logic depends on the name except perhaps localStorage keys or such (unlikely); double-check if any storage or analytics use the old name and migrate if so. Test the app after renaming to catch any missed instance. This change will immediately give users and stakeholders a sense of a new, polished product identity, without affecting how the app runs.
2. Design and Integrate the New Logo
Why: A visual logo is critical for brand recognition and professionalism. It will appear on the site, in the PDF briefs, and in any marketing. Having a logo that embodies our brand (as discussed: possibly a compass/location icon + the word “CityScout” in a clean font) will make the app look established and trustworthy at first glance.
What: Create a simple logo for CityScout. Initially, this could be a stylized wordmark (e.g., “CityScout” in our chosen font and color) accompanied by a basic icon. The icon could be a temporary placeholder if needed (like a material-design location pin icon with a scouting twist) until a custom one is designed. Place the logo in the top navigation bar and on the About page. Also, embed it into the PDF printout header so that shared briefs carry our branding. Prepare favicon and social sharing image (with the logo) for the website as well.
How: Use a design tool (Sketch, Figma, or even a quick online logo maker) to craft the logo. Given time constraints, we might start with a text-based logo: e.g., in the nav, render “CityScout” with the CSS styling (font-family Inter, color #3A5BAF). Add a small compass or pin icon next to it – possibly using an icon library (FontAwesome or Heroicons) for now. Insert this in the NavBar component, replacing the old name text. Ensure the image or text is properly aligned and scaled (maybe ~1.5em tall text). For the PDF, if using a print CSS or a component, add the logo at the top (could be left-aligned header). Test printing to PDF to ensure it appears crisply (SVG format for the icon is ideal for scaling). This task doesn’t impact functionality but significantly improves brand presence. By maintaining the same space for the nav, it won’t break layout – just make sure to optimize the logo size for mobile (perhaps show just the icon on very small screens if needed).
3. Implement the New Color Palette across the Site
Why: The current site likely uses default or arbitrary colors (from the screenshot, mostly black text, maybe a default blue link). To align with our brand identity, we need to apply the chosen color palette (primary blue, secondary teal, accent green/orange, neutral grays). This will create a cohesive look and invoke the feelings we want (trust, modernity). It also improves accessibility and consistency.
What: Update CSS styles or Tailwind config to use:
Primary Blue (#3A5BAF) for primary buttons, links, active menu items, and important headings.
Teal (#17BEBB) for secondary buttons or highlight icons (like slider knobs or info icons).
Use green (#2ca02c) and orange (#ffa600) for indicating positive/negative changes (e.g., the delta percentages and arrows in comparisons).
Apply neutrals for backgrounds (light gray #F5F5F5 for page background or card backgrounds) and text (use dark gray #333 for body text instead of pure black, use #777 for secondary text).
Essentially, do a sweep of all UI elements and assign the nearest appropriate color from our palette. This includes form elements (e.g., focus outline could be blue), card borders (light gray), etc.
How: If using Tailwind CSS, open the Tailwind configuration and define the theme colors:
js
Copy
Edit
theme: {
  colors: {
    primary: '#3A5BAF',
    secondary: '#17BEBB',
    success: '#2ca02c',
    warning: '#ffa600',
    neutral: {
      900: '#333333',  // text primary
      600: '#777777',  // text secondary
      100: '#F5F5F5',  // backgrounds
      200: '#E0E0E0'   // borders
    },
    white: '#ffffff',
    // ...
  }
}
Then, replace instances of old color classes (e.g., text-blue-500 if present or hardcoded hex) with the new ones (like text-primary). Update button classes to have bg-primary etc. If not using Tailwind, adjust the CSS/SCSS: define variables for the colors and use them (e.g., --color-primary: #3A5BAF; and reference in styles). Check elements like the Compare table arrows – currently, they might just use a green/red from a library or default; explicitly set their style to our chosen green and orange (and possibly up-arrow icon as ▲ Unicode or an SVG colored accordingly). After changes, test each page:
The homepage (if any marketing content) – ensure text on any colored backgrounds is readable (adjust font color if needed).
Matcher page – ensure slider track and fills reflect new colors (you might need to custom style the slider inputs as Tailwind might not cover slider track by default).
Brief page – ensure the printed output uses the colors (print CSS might need adjusting so that it prints in color or converts to grayscale gracefully – but since our colors are chosen for contrast, grayscale should still differentiate).
Because Tailwind or global styles means a lot of elements update at once, carefully review that contrast meets standards (e.g., primary blue text on white is fine, but teal text on white might be a tad low contrast for body text, so use teal mostly for small elements/icons, not long text). Ensure no critical functionality relies on specific colors (unlikely, but e.g., if any JS was reading a color value, probably not). This visual overhaul will not break functionality if done via CSS, but it will dramatically improve the look and brand alignment of the site.
4. Update Typography and Apply Consistent Font Styles
Why: Using a clean, web-optimized font (Inter) and establishing hierarchy will improve readability and give the site a modern feel. The current site might be using a default font stack. Consistency in font sizes for headings, body, etc., will also make pages look professionally designed.
What: Incorporate the Inter font for all UI text. Define text styles for headings (H1, H2, etc.), body, and small text, following our guide (e.g., H1 ~32px bold, body 16px regular). Remove any inconsistent font usage. Also consider setting font-feature-settings: "tnum" for tables to enable tabular numbers if using Inter (it supports that), so numeric columns align nicely.
How: In Next.js, use an <link> in _document.js or import via CSS for Inter (Google Fonts link for Inter or use a package like @fontsource/inter). Update the global CSS or Tailwind config typography plugin for fontFamily:
js
Copy
Edit
fontFamily: {
  'sans': ['Inter', 'Helvetica Neue', 'Arial', 'sans-serif'],
  'serif': ['Roboto Slab', 'Georgia', 'serif'], // if needed for special cases
}
Then apply classes: e.g., make body text default to font-sans text-neutral-900 text-base, headings maybe font-sans font-semibold text-2xl etc., or use semantic HTML with a CSS reset such that h1-h6 get appropriate sizing. Specifically, check the components:
NavBar: ensure the app name now uses Inter (likely automatically if global, but just verify no component is forcing a different font).
Titles like “Boston, MA vs Omaha, NE” might be an <h1> – style it with our H1 class (maybe text-2xl or 3xl and bold).
Table text: ensure it’s using the base font. If numeric columns misalign, consider adding a utility class for font-variant-numeric: tabular-nums; (Inter supports this) to those elements.
Button text: should also use Inter and perhaps uppercase or not depending on design (probably not uppercase, just keep normal text for a modern look).
After applying, test on various devices/browsers to ensure the font loads correctly and is legible. The new typography will not affect functionality at all, but will uplift the site’s aesthetic to match our desired brand voice. It also might slightly change spacing (different font metrics), so do a pass to see if any container height needs adjusting (e.g., nav bar height if Inter sits taller).
5. Redesign the Navigation & Footer for Clarity
Why: Navigation is a key touchpoint for users. We want it to immediately convey our brand and help users find key sections (Matcher, About, etc.). A polished nav and footer also signal completeness. Currently, the nav shows “Home | Matcher” and presumably lacks an About link; also, we might not have a footer. Adding an About link and a footer with extra info (copyright, contact) will round out the site and improve navigation UX without affecting app logic.
What: In the top nav, include links to About (so users can access the new about page easily) and possibly a Feedback/Contact if we have one (or incorporate that into About). Highlight the current page in the nav (e.g., underline or bold for the active section, using our primary color). Ensure the CityScout logo in nav links to Home. For the footer: create a simple footer that appears on informational pages (maybe not needed on the interactive pages if it’s a single-page app feel, but definitely on About page or so). Footer can include: © 2025 CityScout, Inc. | Privacy Policy | etc., and a subtle tagline. This helps with SEO (having our name and some keywords on every page) and gives a completeness to the site’s look.
How: Modify the NavBar React component: likely it’s in the layout. Add an <a> or Link for “About” that routes to /about (we will create an about page component soon). Use Tailwind classes or CSS to style nav links: maybe text-neutral-900 hover:text-primary px-4. For active link, if using Next’s Link, we can detect route and add an border-b-2 border-primary or similar to indicate it. Keep the nav responsive (maybe collapse to a hamburger on mobile if too many links; at minimum ensure it wraps nicely). For the footer, create a new component Footer.tsx and include it in the main layout (below content). Style it with text-sm text-neutral-600 and center alignment. It could say: “© 2025 CityScout. All rights reserved. | <a href='/privacy'>Privacy</a> | <a href='mailto:hello@cityscout.com'>Contact</a>”. Use neutral colors so it’s present but not distracting. This doesn’t interfere with any existing function; it’s purely presentational. Test that adding a footer doesn’t push content oddly (in brief printouts, we might want to hide the footer via print CSS so the PDF remains clean). By implementing nav/footer improvements, we enhance usability and professionalism with minimal code impact on core features.
6. Create the About Page with Company Info and Data Methodology
Why: Currently, users lack insight into who is behind the app and how it works. An About page builds trust and allows us to articulate our value proposition (which strengthens the brand). It’s also a place to fulfill the user’s desire for transparency without cluttering the main UI with explanations. By having a well-crafted About page, we answer common questions proactively and present ourselves as an open, credible service – vital for converting curious visitors into users or partners.
What: Develop a new page (/about) that includes sections like:
Our mission and story (as drafted above).
Who it’s for (target audience, possibly in list format).
How it works (explain Matcher and Brief features).
Summary of data sources and what metrics we cover.
Possibly a short FAQ (e.g., “How do you calculate the scores?” “How often is data updated?”).
Team/Contact info.
We should incorporate some visual elements – e.g., an image banner or an infographic snippet – to avoid it being just text. Perhaps include a screenshot of a sample CityScout brief as an example (with our new styling).
How: In Next.js, create pages/about.tsx (if using pages directory) or an app/about/page.tsx (if using the new app router). Use JSX to structure content with proper headings and paragraphs. We can largely reuse the content from this style guide (rewritten in a slightly more marketing tone). For instance:
<h1>About CityScout</h1> then a paragraph of mission.
Use <h2>Our Mission</h2>, <h2>How CityScout Works</h2> etc., for each section.
For visual interest, perhaps use Next/Image to import a relevant image (maybe a royalty-free illustration of a person with a map, or a collage of city images). Ensure images are optimized and have appropriate alt text.
Include a small table or list that enumerates our data sources or key metrics (for the methodology section). Possibly styled as a simple table with two columns (“Metric” – “Source/Description”).
At the bottom, add a “Contact Us” section with either a mailto link or a simple contact form (if we want feedback directly). Even a note “Email us at hello@cityscout.com” is fine for now.
Once content is in place, style the page using our brand styles: headings in primary color, use of icons next to section titles (maybe a target icon near “Mission”, or a data icon near “Data Sources” for flair). This page is mostly static content, so functionality isn’t an issue, but we should ensure it’s mobile-friendly (text not too large, images responsive). After implementing, double-check for typos and that all links (like Privacy or external references) work. The about page will be a living document – as we get user Q&A, we might expand it – but this first version will greatly improve user understanding and trust, and it’s isolated enough to not affect the rest of the app’s operations (other than adding a new route).
7. Integrate Data Source Credits & Explanations in the UI
Why: In addition to the About page, we should bake transparency into the app UI wherever feasible. Users may see a metric and wonder “where does that come from?” or “what does this number mean?” Providing subtle cues or info pop-ups improves trust and user education without requiring them to dig through the About page. It addresses data transparency at the point of use.
What: Add small info icons (ⓘ) or tooltips next to key terms in the interface. For example:
Next to “Affordability (RPP)” label, an info icon that on hover/focus says “Relative Price Parity index. 100 = US average cost. Higher means more expensive.”
blog.allmyfaves.com
.
Next to “Nomad Score” or “Match Score”, an info icon: “Your custom match score out of 100, higher = closer match to your preferences.”
A footer note on the Brief printout: “Data sources: BEA, Census ACS, FCC, etc. (See cityscout.com/about for details).”
Also, possibly include the last updated date for data on the brief (“Data updated Jan 2025”).
How: Identify the components where these labels exist (likely a component that renders each metric name in the table, and the print component). Use a simple tooltip library or a custom HTML title attribute for quick solution. For a nicer UI, implement a hoverable question mark icon: e.g., add an InfoCircleIcon (from Heroicons or FontAwesome) next to the text, and on hover show a small <div className="tooltip"> with the explanation. In React, we can manage tooltip state or use CSS :hover with a sibling element. For accessibility, ensure it’s keyboard focusable (tabindex on the icon, and aria-label or aria-describedby with the content). For the PDF, pure hover tooltips won’t show up, so as a backup, we include footnotes. Possibly number the metrics and list footnotes at bottom of the PDF page: e.g., superscript [1] next to “Affordability” and then “[1] Affordability is measured by RPP index…” in small print at bottom. This way, when someone receives a printed brief, they still get context.
To implement footnotes in code, we might maintain a mapping of metric to footnote text and render at bottom. Since our metrics list is fairly static, this is manageable.
This task is mostly front-end embellishment; it shouldn’t alter any calculations or data flow. We must test that adding these tooltips doesn’t break layout or PDF generation. (In print CSS, we might hide the tooltip icons and only show the footnote text). This change enhances transparency and user confidence with minimal risk – if an icon fails to show, it’s not critical, but if it works, it adds polish and clarity.
8. Refine the “Matcher” User Flow and UI
Why: The Matcher is a core feature. We want to ensure it’s intuitive and reflects our brand polish. Currently, it has sliders and an input for salary and current city. We should check that it guides the user clearly (e.g., labels are clear, default values make sense, and the call-to-action is obvious). A refined Matcher will lead to better engagement (users completing the flow and seeing value).
What: Revisit the Matcher page design:
Ensure each slider has a clear title and maybe an icon (as noted in style guide).
Provide default values or prompts (maybe all sliders default to middle importance, or even better, let the user skip sliders they don’t care about).
Add a bit of help text at the top: e.g., “Tell us what matters to you by adjusting the sliders below. We’ll score cities based on your priorities.” This sets context for new users.
Make the “See top matches” button prominent (our primary blue button, maybe disabled until they select at least one preference if needed).
After clicking, show a loading indicator briefly (if computation takes a moment) to reassure that something’s happening.
Once results show, format the list clearly: rank number, city name, match score, and that “feels like $X vs [current city]” info. We can style the match score as a badge (e.g., a blue pill with white text “61/100”). For the “feels like” subtext, use smaller font and maybe italic or a muted color to separate it from the city name.
If the user didn’t input a current city or salary, adjust the text accordingly (maybe just omit the “feels like” or use a national average baseline).
Add the new branding touches: maybe a faint divider line between each result, and the compare/view buttons styled with our updated button styles (one could be secondary style if we want contrast).
Consider pagination or limiting results to, say, top 10 with an option to load more, if performance is an issue with showing all cities.
How: In the Matcher component (likely a React component managing state of sliders and results):
Update the JSX for labels: e.g., change plain text “Affordability” to include an <Icon name="dollar-sign" /> Affordability if using an icon library. Wrap label and icon in a flex container for alignment.
Insert a brief description at the top of the form in a <p> tag with class text-neutral-700 text-sm to match style.
Ensure the salary input has a label and prefix (“$”) and is styled (maybe a small border radius and padding).
Check the logic: if current city is empty, maybe default to “National average” or prompt them. Possibly require a current city for the salary compare feature to work; if so, mark it required with a * and simple validation (if missing, show an error “Please select your current city to tailor the cost comparison”).
Once the results array is rendered, wrap each in a container <div> and apply our card style classes (background, padding, margin bottom). Within, use <span className="text-xl font-semibold"> for the city name, and another for match score. Maybe use a grid or flex to lay them out nicely. The “Compare” and “View brief” buttons can be grouped to the right of each item, or directly below on mobile. Use margin and flex utilities to ensure spacing.
Test the flow: input some values, get results. Try with no current city and see if our conditional messaging works (maybe instead of “feels like $X”, we could show something like “Cost of living: 5% lower than avg” if no specific city baseline).
This doesn’t alter how the matching algorithm works, just how it’s presented. So functionality remains intact. We must ensure not to break the slider input binding or result calculation – basically just re-labeling and styling.
Also test on mobile: sliders are notoriously tricky on mobile, but if we keep them, ensure they are wide enough and touch-friendly. If mobile UX is subpar, consider an alternate UI like dropdowns (“Low/Med/High importance”) – but that’s a bigger change. For now, styling should suffice.
By refining the Matcher UI, we maintain current functionality but make it more engaging and self-explanatory, thereby improving user completion rates and satisfaction.
9. Enhance the City Comparison Brief Presentation
Why: The Relocation Brief (city comparison page/PDF) is the flagship output of our app – it’s what users share with others. Improving its visual design and clarity directly impacts how our product is perceived by new eyes (friends, family, employers who see the shared PDF). We want it to look like a polished report from a professional firm: well-organized, easy to skim, and on-brand.
What: Apply a layout to the brief that uses headings, sub-sections, and possibly simple visuals:
At the top, clearly state the cities being compared and key context (salary, etc.). For example: “Relocation Brief: Boston, MA vs Omaha, NE” as an H1, and under it “Scenario: Moving from Boston to Omaha with $100,000 salary” as a brief summary line.
Break the content into sections with subheadings: maybe Cost of Living, Income & Housing, Lifestyle & Amenities, Climate & Environment (depending on metrics we have). Group related metrics under these headings to structure the information. This way, someone can jump to what they care about (e.g., if an employer cares about cost-of-living adjustment, they see that section clearly).
Use a two-column or three-column layout if possible for the PDF (for example, metrics might be easier read in two columns of text on an A4 page than one wide table). But given we already have a table format, we might keep one table but style it nicely (shaded header row, our brand colors as discussed, etc.).
Add subtle visualizations: e.g., next to the numeric difference “+22.3%”, include a small green upward arrow icon (▲) which we already plan, maybe even a mini bar indicating magnitude. We can also incorporate icons for each metric row to improve scan-ability in the PDF (like a little house icon next to Rent Index, a wallet icon for Income, a tree for Parks, etc., in a faint way).
Ensure the PDF prints on one or two pages neatly. Avoid content running off awkwardly – we might need page breaks after certain sections if the list is long.
Include the CityScout logo and page footer as mentioned, to brand the document.
Possibly add a short interpretation text at the end: e.g., “Summary: Omaha offers significantly lower cost of living (especially housing) and more green space, while Boston provides a higher average income and more urban amenities like cafes and bars. Depending on your priorities, Omaha could save you money and offer a quieter lifestyle, whereas Boston has the edge on earnings and entertainment.” This kind of human-language summary (even if manually templated for now) can be hugely valuable to readers. It leverages the data to tell a story. We can generate it with simple rules or manually craft for initial demonstration.
How: In the component or template that generates the brief:
Use HTML/CSS that translates well to print (avoid reliance on interactive elements). We can style for screen similarly, but ensure a print media CSS exists (Next.js might allow global print styles, or use a library for printing).
Insert headings in the JSX: for example, above the table, put a h2 with “Cost of Living & Income” and below that list affordability, rent, income metrics; then another h2 for “Lifestyle” before parks, cafes, bars; etc. This means splitting the metrics array or having a defined order and grouping. Implement logic to break metrics into groups and output each group with a heading row. If this is complex to do dynamically, we can simply hardcode sections given our known set of metrics.
Add the logo to the top (centered or top-left with the title). Possibly give the title a colored underline or something subtle for style.
For visual elements: incorporate Unicode arrows ▲▼ (we have them in text anyway), and maybe block elements for bars: we can use simple bar visualization using a div with background color. For instance, represent rent index values as bars by setting a div width proportional to the value (with max 100 maybe). But careful: too many bars can clutter. Might use sparingly for key metrics. Alternatively, use icons as mentioned.
Use CSS grid or tables: If using an HTML <table> for side-by-side metrics, style as per earlier (striped rows, highlighted cells for differences). If not using <table> and going with divs, ensure alignment is maintained.
For the summary text, if implementing: We can craft it by checking differences and concatenating strings. E.g., if (rentIndexDiff > 20%) then include "significantly lower housing costs"; if internetDiff is negative big, "slower internet" etc. But even one manually written generic line might suffice for now. Even stating “Based on these metrics, City A excels in ___, while City B excels in ___.” This part is optional but adds a nice touch.
After changes, generate a PDF (use the browser print to PDF, or if we have a download PDF function, use that) to verify that the layout is good. Pay attention to page breaks – avoid one line of a section ending up alone on page 2 (“widows/orphans”). Use CSS page-break-inside: avoid on sections if necessary.
Check that nothing is broken in the web view version – ideally our changes are just structural/styling. The data is the same, so calculations remain correct.
Ensure dynamic content still populates correctly (the values and percentages). Because we are mostly adding presentation, the logic stays intact.
By making the brief more of a report, we increase the likelihood that when it’s shared, the audience is impressed and can quickly glean insights. This indirectly markets our app as well (imagine an employer seeing a candidate’s CityScout brief and thinking “That’s handy – maybe our HR should partner with these guys”). Functionally, the app still produces the same info, but now in a superior format.
10. Search Engine Optimization & Metadata Improvements
Why: To attract organic users (remote workers searching for city info), we need good SEO. Currently, if all content is behind the app, search engines might not easily index city data. We should implement basic SEO like unique page titles for city comparisons, meta descriptions containing city names, and possibly create static pages or a sitemap for major cities. This increases our visibility on Google (e.g., someone Googling “Boston vs Omaha cost of living” should find our page).
What:
Set the <title> tag dynamically for comparison pages: e.g., “Boston vs Omaha – CityScout Brief”. For the Matcher, something like “CityScout Matcher – Find your city”. For the homepage and about: relevant titles/taglines.
Add <meta name="description"> summarizing the page. For a comparison, “Compare Boston, MA and Omaha, NE across cost of living, salaries, and lifestyle metrics. See how far $100k salary goes, housing costs, internet speeds, and more – CityScout relocation brief.” This not only helps SEO but also ensures when someone shares the link on social media, it shows a nice snippet.
Use Open Graph tags for richer link previews (og:title, og:description, perhaps og:image if we can generate one or just use a generic CityScout image).
Consider generating static pages for each city (or top cities) that describe their metrics (even if not comparing) as content marketing. That might be a larger project; initially, we can ensure our dynamic routes are pre-renderable by Next for indexing (if using Next’s SSR or SSG for certain pages, we might do that).
Generate a sitemap.xml listing at least the about page and maybe some example compare pages (or instructions for users to generate? This might be advanced).
How: In Next.js Head component usage:
For pages like [cityA]-vs-[cityB].tsx route (assuming such exists for the compare), use getStaticProps or getServerSideProps to fetch needed data for SEO if possible and return meta info. Or simpler, if the page URL contains city names, parse those and set the title accordingly (the data is likely already loaded to display the page).
Ensure the about page has a descriptive title (“About CityScout – relocation data for remote workers”) and meta description (one or two sentences from our about content).
For Open Graph image: perhaps create a simple branded banner (with our logo and some tagline) to use as default. Put that in public/og-image.png and reference it in a meta tag.
Also, update the robots.txt to allow indexing, and maybe list important pages.
None of these affect user functionality directly; they are mostly invisible improvements. But they require verifying that dynamic pages can be crawled. Possibly consider if we need to use next export or SSR to ensure bots see the content. If some parts are client-side rendered only, search bots might miss it. We might need to implement SSR for comparison pages (which is doable if we can fetch data server-side given we have static data files or API). If that’s too heavy now, an interim solution is generating a static HTML snapshot for top few comparisons or providing enough meta tags to give context.
Test by viewing page source or using SEO tools to see that our tags are present. This step ensures that over time, CityScout pages gain search traction, bringing in more users organically – a key advantage over competitors if they haven’t optimized (and many older ones have decent SEO, so we need to catch up).
This task should not break site functionality; it only augments the <head> section. We just need to ensure variable interpolation is correct (e.g., no undefined city name in title if a prop is missing). Also, adding these doesn’t slow anything significantly.